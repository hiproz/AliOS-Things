<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="debug_8h" kind="file" language="C++">
    <compoundname>debug.h</compoundname>
    <includedby refid="aos_8h" local="no">/home/work/me/AliOS-Things/include/aos/aos.h</includedby>
    <invincdepgraph>
      <node id="44">
        <label>/home/work/me/AliOS-Things/include/aos/debug.h</label>
        <link refid="debug.h"/>
        <childnode refid="45" relation="include">
        </childnode>
      </node>
      <node id="49">
        <label>/home/work/me/AliOS-Things/include/hal/wifi.h</label>
        <link refid="wifi_8h"/>
        <childnode refid="47" relation="include">
        </childnode>
      </node>
      <node id="45">
        <label>/home/work/me/AliOS-Things/include/aos/aos.h</label>
        <link refid="aos_8h"/>
        <childnode refid="46" relation="include">
        </childnode>
      </node>
      <node id="46">
        <label>/home/work/me/AliOS-Things/include/hal/base.h</label>
        <link refid="base_8h"/>
        <childnode refid="47" relation="include">
        </childnode>
        <childnode refid="48" relation="include">
        </childnode>
        <childnode refid="49" relation="include">
        </childnode>
      </node>
      <node id="48">
        <label>/home/work/me/AliOS-Things/include/hal/ota.h</label>
        <link refid="ota_8h"/>
        <childnode refid="47" relation="include">
        </childnode>
      </node>
      <node id="47">
        <label>/home/work/me/AliOS-Things/include/hal/hal.h</label>
        <link refid="hal_8h"/>
      </node>
    </invincdepgraph>
      <sectiondef kind="define">
      <memberdef kind="define" id="debug_8h_1ae262b34c650329f4896e6c3adeaf99d0" prot="public" static="no">
        <name>SHORT_FILE</name>
        <initializer>__FILENAME__</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/work/me/AliOS-Things/include/aos/debug.h" line="12" column="9" bodyfile="/home/work/me/AliOS-Things/include/aos/debug.h" bodystart="12" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="debug_8h_1aa497f2a6a03dd57dc3ee43f9af17d053" prot="public" static="no">
        <name>debug_print_assert</name>
        <param><defname>A</defname></param>
        <param><defname>B</defname></param>
        <param><defname>C</defname></param>
        <param><defname>D</defname></param>
        <param><defname>E</defname></param>
        <param><defname>F</defname></param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/work/me/AliOS-Things/include/aos/debug.h" line="14" column="9" bodyfile="/home/work/me/AliOS-Things/include/aos/debug.h" bodystart="14" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="debug_8h_1a84a1f426a227f1448ec65947ac42919e" prot="public" static="no">
        <name>unlikely</name>
        <param><defname>EXPRESSSION</defname></param>
        <initializer>!!(EXPRESSSION)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/work/me/AliOS-Things/include/aos/debug.h" line="17" column="9" bodyfile="/home/work/me/AliOS-Things/include/aos/debug.h" bodystart="17" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="debug_8h_1ac7484fb87785e637ebc2895cb5d5a51b" prot="public" static="no">
        <name>check</name>
        <param><defname>X</defname></param>
        <initializer>do {                                                                                \
            if (<ref refid="debug_8h_1a84a1f426a227f1448ec65947ac42919e" kindref="member">unlikely</ref>(!(X))) {                                                           \
                <ref refid="debug_8h_1aa497f2a6a03dd57dc3ee43f9af17d053" kindref="member">debug_print_assert</ref>(0, #X, NULL, <ref refid="debug_8h_1ae262b34c650329f4896e6c3adeaf99d0" kindref="member">SHORT_FILE</ref>, __LINE__, __PRETTY_FUNCTION__); \
            }                                                                               \
        } while(1 == 0)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/work/me/AliOS-Things/include/aos/debug.h" line="28" column="9" bodyfile="/home/work/me/AliOS-Things/include/aos/debug.h" bodystart="28" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="debug_8h_1a7815306b9d49d852a9a3658493457ad2" prot="public" static="no">
        <name>check_string</name>
        <param><defname>X</defname></param>
        <param><defname>STR</defname></param>
        <initializer>do {                                                                               \
            if (<ref refid="debug_8h_1a84a1f426a227f1448ec65947ac42919e" kindref="member">unlikely</ref>(!(X))) {                                                          \
                <ref refid="debug_8h_1aa497f2a6a03dd57dc3ee43f9af17d053" kindref="member">debug_print_assert</ref>(0, #X, STR, <ref refid="debug_8h_1ae262b34c650329f4896e6c3adeaf99d0" kindref="member">SHORT_FILE</ref>, __LINE__, __PRETTY_FUNCTION__); \
                AOS_ASSERTION_FAIL_ACTION();                                               \
            }                                                                              \
        } while(1 == 0)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/work/me/AliOS-Things/include/aos/debug.h" line="45" column="9" bodyfile="/home/work/me/AliOS-Things/include/aos/debug.h" bodystart="45" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="debug_8h_1a38a61c69561923a5402af2ae718efe48" prot="public" static="no">
        <name>require</name>
        <param><defname>X</defname></param>
        <param><defname>LABEL</defname></param>
        <initializer>do {                                                                                  \
            if (<ref refid="debug_8h_1a84a1f426a227f1448ec65947ac42919e" kindref="member">unlikely</ref>(!(X))) {                                                             \
                <ref refid="debug_8h_1aa497f2a6a03dd57dc3ee43f9af17d053" kindref="member">debug_print_assert</ref>( 0, #X, NULL, <ref refid="debug_8h_1ae262b34c650329f4896e6c3adeaf99d0" kindref="member">SHORT_FILE</ref>, __LINE__, __PRETTY_FUNCTION__ ); \
                goto LABEL;                                                                   \
            }                                                                                 \
        } while(1 == 0)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/work/me/AliOS-Things/include/aos/debug.h" line="63" column="9" bodyfile="/home/work/me/AliOS-Things/include/aos/debug.h" bodystart="63" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="debug_8h_1a5d1334664ee9b47f6764a98e894758e5" prot="public" static="no">
        <name>require_string</name>
        <param><defname>X</defname></param>
        <param><defname>LABEL</defname></param>
        <param><defname>STR</defname></param>
        <initializer>do {                                                                               \
            if (<ref refid="debug_8h_1a84a1f426a227f1448ec65947ac42919e" kindref="member">unlikely</ref>(!(X))) {                                                          \
                <ref refid="debug_8h_1aa497f2a6a03dd57dc3ee43f9af17d053" kindref="member">debug_print_assert</ref>(0, #X, STR, <ref refid="debug_8h_1ae262b34c650329f4896e6c3adeaf99d0" kindref="member">SHORT_FILE</ref>, __LINE__, __PRETTY_FUNCTION__); \
                goto LABEL;                                                                \
            }                                                                              \
        } while(1 == 0)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/work/me/AliOS-Things/include/aos/debug.h" line="82" column="9" bodyfile="/home/work/me/AliOS-Things/include/aos/debug.h" bodystart="82" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="debug_8h_1a3b6ad49f54b0d9261326d2b66744dcdf" prot="public" static="no">
        <name>require_quiet</name>
        <param><defname>X</defname></param>
        <param><defname>LABEL</defname></param>
        <initializer>do {                      \
            if (<ref refid="debug_8h_1a84a1f426a227f1448ec65947ac42919e" kindref="member">unlikely</ref>(!(X))) { \
                goto LABEL;       \
            }                     \
        } while(1 == 0)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/work/me/AliOS-Things/include/aos/debug.h" line="99" column="9" bodyfile="/home/work/me/AliOS-Things/include/aos/debug.h" bodystart="99" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="debug_8h_1a02c3df4b13f819669925ada472a62162" prot="public" static="no">
        <name>require_noerr</name>
        <param><defname>ERR</defname></param>
        <param><defname>LABEL</defname></param>
        <initializer>do {                                                                                         \
            int localErr;                                                                            \
                                                                                                     \
            localErr = (int)(ERR);                                                                   \
            if (<ref refid="debug_8h_1a84a1f426a227f1448ec65947ac42919e" kindref="member">unlikely</ref>(localErr != 0)) {                                                           \
                <ref refid="debug_8h_1aa497f2a6a03dd57dc3ee43f9af17d053" kindref="member">debug_print_assert</ref>(localErr, NULL, NULL, <ref refid="debug_8h_1ae262b34c650329f4896e6c3adeaf99d0" kindref="member">SHORT_FILE</ref>, __LINE__, __PRETTY_FUNCTION__); \
                goto LABEL;                                                                          \
            }                                                                                        \
                                                                                                     \
        } while(1 == 0)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/work/me/AliOS-Things/include/aos/debug.h" line="116" column="9" bodyfile="/home/work/me/AliOS-Things/include/aos/debug.h" bodystart="116" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="debug_8h_1a8d9b38f0b5293590b9637098fb67651f" prot="public" static="no">
        <name>require_noerr_string</name>
        <param><defname>ERR</defname></param>
        <param><defname>LABEL</defname></param>
        <param><defname>STR</defname></param>
        <initializer>do {                                                                                        \
            int localErr;                                                                           \
                                                                                                    \
            localErr = (int)(ERR);                                                                  \
            if (<ref refid="debug_8h_1a84a1f426a227f1448ec65947ac42919e" kindref="member">unlikely</ref>(localErr != 0)) {                                                          \
                <ref refid="debug_8h_1aa497f2a6a03dd57dc3ee43f9af17d053" kindref="member">debug_print_assert</ref>(localErr, NULL, STR, <ref refid="debug_8h_1ae262b34c650329f4896e6c3adeaf99d0" kindref="member">SHORT_FILE</ref>, __LINE__, __PRETTY_FUNCTION__); \
                goto LABEL;                                                                         \
            }                                                                                       \
        } while(1 == 0)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/work/me/AliOS-Things/include/aos/debug.h" line="140" column="9" bodyfile="/home/work/me/AliOS-Things/include/aos/debug.h" bodystart="140" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="debug_8h_1a640247fef12b0c53780f021f3a738620" prot="public" static="no">
        <name>require_noerr_action_string</name>
        <param><defname>ERR</defname></param>
        <param><defname>LABEL</defname></param>
        <param><defname>ACTION</defname></param>
        <param><defname>STR</defname></param>
        <initializer>do {                                                                                        \
            int localErr;                                                                           \
                                                                                                    \
            localErr = (int)(ERR);                                                                  \
            if (<ref refid="debug_8h_1a84a1f426a227f1448ec65947ac42919e" kindref="member">unlikely</ref>(localErr != 0)) {                                                          \
                <ref refid="debug_8h_1aa497f2a6a03dd57dc3ee43f9af17d053" kindref="member">debug_print_assert</ref>(localErr, NULL, STR, <ref refid="debug_8h_1ae262b34c650329f4896e6c3adeaf99d0" kindref="member">SHORT_FILE</ref>, __LINE__, __PRETTY_FUNCTION__); \
                { ACTION; }                                                                         \
                goto LABEL;                                                                         \
            }                                                                                       \
        } while(1 == 0)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/work/me/AliOS-Things/include/aos/debug.h" line="164" column="9" bodyfile="/home/work/me/AliOS-Things/include/aos/debug.h" bodystart="164" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="debug_8h_1a1607344c6ff3f694527458dcd73a6fbf" prot="public" static="no">
        <name>require_noerr_quiet</name>
        <param><defname>ERR</defname></param>
        <param><defname>LABEL</defname></param>
        <initializer>do {                            \
            if (<ref refid="debug_8h_1a84a1f426a227f1448ec65947ac42919e" kindref="member">unlikely</ref>((ERR) != 0)) { \
                goto LABEL;             \
            }                           \
        } while(1 == 0)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/work/me/AliOS-Things/include/aos/debug.h" line="185" column="9" bodyfile="/home/work/me/AliOS-Things/include/aos/debug.h" bodystart="185" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="debug_8h_1aa60121841639f3b5700b19a1526a5232" prot="public" static="no">
        <name>require_noerr_action</name>
        <param><defname>ERR</defname></param>
        <param><defname>LABEL</defname></param>
        <param><defname>ACTION</defname></param>
        <initializer>do {                                                                                         \
            int localErr;                                                                            \
                                                                                                     \
            localErr = (int)(ERR);                                                                   \
            if (<ref refid="debug_8h_1a84a1f426a227f1448ec65947ac42919e" kindref="member">unlikely</ref>(localErr != 0)) {                                                           \
                <ref refid="debug_8h_1aa497f2a6a03dd57dc3ee43f9af17d053" kindref="member">debug_print_assert</ref>(localErr, NULL, NULL, <ref refid="debug_8h_1ae262b34c650329f4896e6c3adeaf99d0" kindref="member">SHORT_FILE</ref>, __LINE__, __PRETTY_FUNCTION__); \
                { ACTION; }                                                                          \
                goto LABEL;                                                                          \
            }                                                                                        \
        } while(1 == 0)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/work/me/AliOS-Things/include/aos/debug.h" line="203" column="9" bodyfile="/home/work/me/AliOS-Things/include/aos/debug.h" bodystart="203" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="debug_8h_1a16f33c6ca26bcd92165c23a8cff1d28f" prot="public" static="no">
        <name>require_noerr_action_quiet</name>
        <param><defname>ERR</defname></param>
        <param><defname>LABEL</defname></param>
        <param><defname>ACTION</defname></param>
        <initializer>do {                                           \
            if (<ref refid="debug_8h_1a84a1f426a227f1448ec65947ac42919e" kindref="member">unlikely</ref>((ERR) != 0)) {                \
                { ACTION; }                            \
                goto LABEL;                            \
            }                                          \
        } while(1 == 0)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/work/me/AliOS-Things/include/aos/debug.h" line="225" column="9" bodyfile="/home/work/me/AliOS-Things/include/aos/debug.h" bodystart="225" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="debug_8h_1af4a91824c6ca0f3dea55d5cac7319b65" prot="public" static="no">
        <name>require_action</name>
        <param><defname>X</defname></param>
        <param><defname>LABEL</defname></param>
        <param><defname>ACTION</defname></param>
        <initializer>do {                                                                                \
            if (<ref refid="debug_8h_1a84a1f426a227f1448ec65947ac42919e" kindref="member">unlikely</ref>(!(X))) {                                                           \
                <ref refid="debug_8h_1aa497f2a6a03dd57dc3ee43f9af17d053" kindref="member">debug_print_assert</ref>(0, #X, NULL, <ref refid="debug_8h_1ae262b34c650329f4896e6c3adeaf99d0" kindref="member">SHORT_FILE</ref>, __LINE__, __PRETTY_FUNCTION__); \
                { ACTION; }                                                                 \
                goto LABEL;                                                                 \
            }                                                                               \
        } while (1 == 0)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/work/me/AliOS-Things/include/aos/debug.h" line="244" column="9" bodyfile="/home/work/me/AliOS-Things/include/aos/debug.h" bodystart="244" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="debug_8h_1a46ec6dd3ae533fecdaaa01bd14d38c9d" prot="public" static="no">
        <name>require_action_string</name>
        <param><defname>X</defname></param>
        <param><defname>LABEL</defname></param>
        <param><defname>ACTION</defname></param>
        <param><defname>STR</defname></param>
        <initializer>do {                                                                               \
            if (<ref refid="debug_8h_1a84a1f426a227f1448ec65947ac42919e" kindref="member">unlikely</ref>(!(X))) {                                                          \
                <ref refid="debug_8h_1aa497f2a6a03dd57dc3ee43f9af17d053" kindref="member">debug_print_assert</ref>(0, #X, STR, <ref refid="debug_8h_1ae262b34c650329f4896e6c3adeaf99d0" kindref="member">SHORT_FILE</ref>, __LINE__, __PRETTY_FUNCTION__); \
                { ACTION; }                                                                \
                goto LABEL;                                                                \
            }                                                                              \
        } while (1 == 0)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/work/me/AliOS-Things/include/aos/debug.h" line="266" column="9" bodyfile="/home/work/me/AliOS-Things/include/aos/debug.h" bodystart="266" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="debug_8h_1a509a09fd01a9417030de240e23309a29" prot="public" static="no">
        <name>require_action_quiet</name>
        <param><defname>X</defname></param>
        <param><defname>LABEL</defname></param>
        <param><defname>ACTION</defname></param>
        <initializer>do {                                   \
            if (<ref refid="debug_8h_1a84a1f426a227f1448ec65947ac42919e" kindref="member">unlikely</ref>(!(X))) {              \
                { ACTION; }                    \
                goto LABEL;                    \
            }                                  \
                                               \
        } while(1 == 0)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/work/me/AliOS-Things/include/aos/debug.h" line="286" column="9" bodyfile="/home/work/me/AliOS-Things/include/aos/debug.h" bodystart="286" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(C)<sp/>2015-2017<sp/>Alibaba<sp/>Group<sp/>Holding<sp/>Limited</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>AOS_DEBUG_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>AOS_DEBUG_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight></codeline>
<codeline lineno="12" refid="debug_8h_1ae262b34c650329f4896e6c3adeaf99d0" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SHORT_FILE<sp/>__FILENAME__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight></codeline>
<codeline lineno="14" refid="debug_8h_1aa497f2a6a03dd57dc3ee43f9af17d053" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>debug_print_assert(A,B,C,D,E,F)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>(!defined(unlikely))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17" refid="debug_8h_1a84a1f426a227f1448ec65947ac42919e" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>unlikely(EXPRESSSION)<sp/>!!(EXPRESSSION)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="21"><highlight class="comment"><sp/>*<sp/>Check<sp/>that<sp/>an<sp/>expression<sp/>is<sp/>true<sp/>(non-zero).</highlight></codeline>
<codeline lineno="22"><highlight class="comment"><sp/>*<sp/>If<sp/>expression<sp/>evalulates<sp/>to<sp/>false,<sp/>this<sp/>prints<sp/>debugging<sp/>information<sp/>(actual<sp/>expression<sp/>string,<sp/>file,<sp/>line<sp/>number,</highlight></codeline>
<codeline lineno="23"><highlight class="comment"><sp/>*<sp/>function<sp/>name,<sp/>etc.)<sp/>using<sp/>the<sp/>default<sp/>debugging<sp/>output<sp/>method.</highlight></codeline>
<codeline lineno="24"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="25"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/><sp/>X<sp/><sp/>expression<sp/>to<sp/>be<sp/>evaluated.</highlight></codeline>
<codeline lineno="26"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>(!defined(check))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28" refid="debug_8h_1ac7484fb87785e637ebc2895cb5d5a51b" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>check(X)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="29"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>do<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="30"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(unlikely(!(X)))<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="31"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>debug_print_assert(0,<sp/>#X,<sp/>NULL,<sp/>SHORT_FILE,<sp/>__LINE__,<sp/>__PRETTY_FUNCTION__);<sp/>\</highlight></codeline>
<codeline lineno="32"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="33"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>while(1<sp/>==<sp/>0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="37"><highlight class="comment"><sp/>*<sp/>Check<sp/>that<sp/>an<sp/>expression<sp/>is<sp/>true<sp/>(non-zero)<sp/>with<sp/>an<sp/>explanation.</highlight></codeline>
<codeline lineno="38"><highlight class="comment"><sp/>*<sp/>If<sp/>expression<sp/>evalulates<sp/>to<sp/>false,<sp/>this<sp/>prints<sp/>debugging<sp/>information<sp/>(actual<sp/>expression<sp/>string,<sp/>file,<sp/>line<sp/>number,</highlight></codeline>
<codeline lineno="39"><highlight class="comment"><sp/>*<sp/>function<sp/>name,<sp/>etc.)<sp/>using<sp/>the<sp/>default<sp/>debugging<sp/>output<sp/>method.</highlight></codeline>
<codeline lineno="40"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="41"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/><sp/>X<sp/><sp/><sp/><sp/><sp/><sp/><sp/>expression<sp/>to<sp/>be<sp/>evaluated.</highlight></codeline>
<codeline lineno="42"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/><sp/>STR<sp/><sp/><sp/><sp/><sp/>If<sp/>the<sp/>expression<sp/>evaluate<sp/>to<sp/>false,<sp/>custom<sp/>string<sp/>to<sp/>print.</highlight></codeline>
<codeline lineno="43"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>(!defined(check_string))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45" refid="debug_8h_1a7815306b9d49d852a9a3658493457ad2" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>check_string(X,<sp/>STR)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="46"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>do<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="47"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(unlikely(!(X)))<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="48"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>debug_print_assert(0,<sp/>#X,<sp/>STR,<sp/>SHORT_FILE,<sp/>__LINE__,<sp/>__PRETTY_FUNCTION__);<sp/>\</highlight></codeline>
<codeline lineno="49"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AOS_ASSERTION_FAIL_ACTION();<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="50"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="51"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>while(1<sp/>==<sp/>0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="55"><highlight class="comment"><sp/>*<sp/>Requires<sp/>that<sp/>an<sp/>expression<sp/>evaluate<sp/>to<sp/>true.</highlight></codeline>
<codeline lineno="56"><highlight class="comment"><sp/>*<sp/>If<sp/>expression<sp/>evalulates<sp/>to<sp/>false,<sp/>this<sp/>prints<sp/>debugging<sp/>information<sp/>(actual<sp/>expression<sp/>string,<sp/>file,<sp/>line<sp/>number,</highlight></codeline>
<codeline lineno="57"><highlight class="comment"><sp/>*<sp/>function<sp/>name,<sp/>etc.)<sp/>using<sp/>the<sp/>default<sp/>debugging<sp/>output<sp/>method<sp/>then<sp/>jumps<sp/>to<sp/>a<sp/>label.</highlight></codeline>
<codeline lineno="58"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="59"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/><sp/>X<sp/><sp/><sp/><sp/><sp/><sp/>expression<sp/>to<sp/>be<sp/>evalulated.</highlight></codeline>
<codeline lineno="60"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/><sp/>LABEL<sp/><sp/>if<sp/>expression<sp/>evaluate<sp/>to<sp/>false,jumps<sp/>to<sp/>the<sp/>LABEL.</highlight></codeline>
<codeline lineno="61"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>(!defined(require))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63" refid="debug_8h_1a38a61c69561923a5402af2ae718efe48" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>require(X,<sp/>LABEL)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="64"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>do<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="65"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(unlikely(!(X)))<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="66"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>debug_print_assert(<sp/>0,<sp/>#X,<sp/>NULL,<sp/>SHORT_FILE,<sp/>__LINE__,<sp/>__PRETTY_FUNCTION__<sp/>);<sp/>\</highlight></codeline>
<codeline lineno="67"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>goto<sp/>LABEL;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="68"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="69"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>while(1<sp/>==<sp/>0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="73"><highlight class="comment"><sp/>*<sp/>Requires<sp/>that<sp/>an<sp/>expression<sp/>evaluate<sp/>to<sp/>true<sp/>with<sp/>an<sp/>explanation.</highlight></codeline>
<codeline lineno="74"><highlight class="comment"><sp/>*<sp/>If<sp/>expression<sp/>evalulates<sp/>to<sp/>false,<sp/>this<sp/>prints<sp/>debugging<sp/>information<sp/>(actual<sp/>expression<sp/>string,<sp/>file,<sp/>line<sp/>number,</highlight></codeline>
<codeline lineno="75"><highlight class="comment"><sp/>*<sp/>function<sp/>name,<sp/>etc.)<sp/>and<sp/>a<sp/>custom<sp/>explanation<sp/>string<sp/>using<sp/>the<sp/>default<sp/>debugging<sp/>output<sp/>method<sp/>then<sp/>jumps<sp/>to<sp/>a<sp/>label.</highlight></codeline>
<codeline lineno="76"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="77"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/><sp/>X<sp/><sp/><sp/><sp/><sp/><sp/>expression<sp/>to<sp/>be<sp/>evalulated.</highlight></codeline>
<codeline lineno="78"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/><sp/>LABEL<sp/><sp/>if<sp/>expression<sp/>evaluate<sp/>to<sp/>false,jumps<sp/>to<sp/>the<sp/>LABEL.</highlight></codeline>
<codeline lineno="79"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/><sp/>STR<sp/><sp/><sp/><sp/>if<sp/>expression<sp/>evaluate<sp/>to<sp/>false,custom<sp/>explanation<sp/>string<sp/>to<sp/>print.</highlight></codeline>
<codeline lineno="80"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>(!defined(require_string))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="82" refid="debug_8h_1a5d1334664ee9b47f6764a98e894758e5" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>require_string(X,<sp/>LABEL,<sp/>STR)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="83"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>do<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="84"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(unlikely(!(X)))<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="85"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>debug_print_assert(0,<sp/>#X,<sp/>STR,<sp/>SHORT_FILE,<sp/>__LINE__,<sp/>__PRETTY_FUNCTION__);<sp/>\</highlight></codeline>
<codeline lineno="86"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>goto<sp/>LABEL;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="87"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="88"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>while(1<sp/>==<sp/>0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="92"><highlight class="comment"><sp/>*<sp/>Requires<sp/>that<sp/>an<sp/>expression<sp/>evaluate<sp/>to<sp/>true.</highlight></codeline>
<codeline lineno="93"><highlight class="comment"><sp/>*<sp/>If<sp/>expression<sp/>evalulates<sp/>to<sp/>false,<sp/>this<sp/>jumps<sp/>to<sp/>a<sp/>label.<sp/>No<sp/>debugging<sp/>information<sp/>is<sp/>printed.</highlight></codeline>
<codeline lineno="94"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="95"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/><sp/>X<sp/><sp/><sp/><sp/><sp/><sp/>expression<sp/>to<sp/>be<sp/>evalulated</highlight></codeline>
<codeline lineno="96"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/><sp/>LABEL<sp/><sp/>if<sp/>expression<sp/>evaluate<sp/>to<sp/>false,jumps<sp/>to<sp/>the<sp/>LABEL.</highlight></codeline>
<codeline lineno="97"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>(!defined(require_quiet))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="99" refid="debug_8h_1a3b6ad49f54b0d9261326d2b66744dcdf" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>require_quiet(X,<sp/>LABEL)<sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="100"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>do<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="101"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(unlikely(!(X)))<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="102"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>goto<sp/>LABEL;<sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="103"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="104"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>while(1<sp/>==<sp/>0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="108"><highlight class="comment"><sp/>*<sp/>Require<sp/>that<sp/>an<sp/>error<sp/>code<sp/>is<sp/>noErr<sp/>(0).</highlight></codeline>
<codeline lineno="109"><highlight class="comment"><sp/>*<sp/>If<sp/>the<sp/>error<sp/>code<sp/>is<sp/>non-0,<sp/>this<sp/>prints<sp/>debugging<sp/>information<sp/>(actual<sp/>expression<sp/>string,<sp/>file,<sp/>line<sp/>number,</highlight></codeline>
<codeline lineno="110"><highlight class="comment"><sp/>*<sp/>function<sp/>name,<sp/>etc.)<sp/>using<sp/>the<sp/>default<sp/>debugging<sp/>output<sp/>method<sp/>then<sp/>jumps<sp/>to<sp/>a<sp/>label.</highlight></codeline>
<codeline lineno="111"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="112"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/><sp/>ERR<sp/><sp/><sp/><sp/>error<sp/>to<sp/>be<sp/>evaluated</highlight></codeline>
<codeline lineno="113"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/><sp/>LABEL<sp/><sp/>If<sp/>the<sp/>error<sp/>code<sp/>is<sp/>non-0,jumps<sp/>to<sp/>the<sp/>LABEL.</highlight></codeline>
<codeline lineno="114"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>(!defined(require_noerr))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="116" refid="debug_8h_1a02c3df4b13f819669925ada472a62162" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>require_noerr(ERR,<sp/>LABEL)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="117"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>do<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="118"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>localErr;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="119"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="120"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>localErr<sp/>=<sp/>(int)(ERR);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="121"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(unlikely(localErr<sp/>!=<sp/>0))<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="122"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>debug_print_assert(localErr,<sp/>NULL,<sp/>NULL,<sp/>SHORT_FILE,<sp/>__LINE__,<sp/>__PRETTY_FUNCTION__);<sp/>\</highlight></codeline>
<codeline lineno="123"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>goto<sp/>LABEL;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="124"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="125"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="126"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>while(1<sp/>==<sp/>0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="130"><highlight class="comment"><sp/>*<sp/>Require<sp/>that<sp/>an<sp/>error<sp/>code<sp/>is<sp/>noErr<sp/>(0)<sp/>with<sp/>an<sp/>explanation.</highlight></codeline>
<codeline lineno="131"><highlight class="comment"><sp/>*<sp/>If<sp/>the<sp/>error<sp/>code<sp/>is<sp/>non-0,<sp/>this<sp/>prints<sp/>debugging<sp/>information<sp/>(actual<sp/>expression<sp/>string,<sp/>file,<sp/>line<sp/>number,</highlight></codeline>
<codeline lineno="132"><highlight class="comment"><sp/>*<sp/>function<sp/>name,<sp/>etc.),<sp/>and<sp/>a<sp/>custom<sp/>explanation<sp/>string<sp/>using<sp/>the<sp/>default<sp/>debugging<sp/>output<sp/>method<sp/>using<sp/>the</highlight></codeline>
<codeline lineno="133"><highlight class="comment"><sp/>*<sp/>default<sp/>debugging<sp/>output<sp/>method<sp/>then<sp/>jumps<sp/>to<sp/>a<sp/>label.</highlight></codeline>
<codeline lineno="134"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="135"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/><sp/>ERR<sp/><sp/><sp/><sp/>error<sp/>to<sp/>be<sp/>evaluated</highlight></codeline>
<codeline lineno="136"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/><sp/>LABEL<sp/><sp/>If<sp/>the<sp/>error<sp/>code<sp/>is<sp/>non-0,<sp/>jumps<sp/>to<sp/>the<sp/>LABEL.</highlight></codeline>
<codeline lineno="137"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/><sp/>STR<sp/><sp/><sp/><sp/>If<sp/>the<sp/>error<sp/>code<sp/>is<sp/>non-0,<sp/>custom<sp/>explanation<sp/>string<sp/>to<sp/>print</highlight></codeline>
<codeline lineno="138"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>(!defined(require_noerr_string))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="140" refid="debug_8h_1a8d9b38f0b5293590b9637098fb67651f" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>require_noerr_string(ERR,<sp/>LABEL,<sp/>STR)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="141"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>do<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="142"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>localErr;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="143"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="144"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>localErr<sp/>=<sp/>(int)(ERR);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="145"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(unlikely(localErr<sp/>!=<sp/>0))<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="146"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>debug_print_assert(localErr,<sp/>NULL,<sp/>STR,<sp/>SHORT_FILE,<sp/>__LINE__,<sp/>__PRETTY_FUNCTION__);<sp/>\</highlight></codeline>
<codeline lineno="147"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>goto<sp/>LABEL;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="148"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="149"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>while(1<sp/>==<sp/>0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="153"><highlight class="comment"><sp/>*<sp/>Require<sp/>that<sp/>an<sp/>error<sp/>code<sp/>is<sp/>noErr<sp/>(0)<sp/><sp/>with<sp/>an<sp/>explanation<sp/>and<sp/>action<sp/>to<sp/>execute<sp/>otherwise.</highlight></codeline>
<codeline lineno="154"><highlight class="comment"><sp/>*<sp/>If<sp/>the<sp/>error<sp/>code<sp/>is<sp/>non-0,<sp/>this<sp/>prints<sp/>debugging<sp/>information<sp/>(actual<sp/>expression<sp/>string,<sp/>file,<sp/>line<sp/>number,</highlight></codeline>
<codeline lineno="155"><highlight class="comment"><sp/>*<sp/>function<sp/>name,<sp/>etc.),<sp/>and<sp/>a<sp/>custom<sp/>explanation<sp/>string<sp/>using<sp/>the<sp/>default<sp/>debugging<sp/>output<sp/>method<sp/>using<sp/>the</highlight></codeline>
<codeline lineno="156"><highlight class="comment"><sp/>*<sp/>default<sp/>debugging<sp/>output<sp/>method<sp/>then<sp/>executes<sp/>an<sp/>action<sp/>and<sp/>jumps<sp/>to<sp/>a<sp/>label.</highlight></codeline>
<codeline lineno="157"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="158"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/><sp/>ERR<sp/><sp/><sp/><sp/><sp/>error<sp/>to<sp/>be<sp/>evaluated.</highlight></codeline>
<codeline lineno="159"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/><sp/>LABEL<sp/><sp/><sp/>If<sp/>the<sp/>error<sp/>code<sp/>is<sp/>non-0,<sp/>jumps<sp/>to<sp/>the<sp/>LABEL.</highlight></codeline>
<codeline lineno="160"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/><sp/>ACTION<sp/><sp/>If<sp/>the<sp/>error<sp/>code<sp/>is<sp/>non-0,<sp/>custom<sp/>code<sp/>to<sp/>executes.</highlight></codeline>
<codeline lineno="161"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/><sp/>STR<sp/><sp/><sp/><sp/><sp/>If<sp/>the<sp/>error<sp/>code<sp/>is<sp/>non-0,<sp/>custom<sp/>explanation<sp/>string<sp/>to<sp/>print.</highlight></codeline>
<codeline lineno="162"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>(!defined(require_noerr_action_string))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="164" refid="debug_8h_1a640247fef12b0c53780f021f3a738620" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>require_noerr_action_string(ERR,<sp/>LABEL,<sp/>ACTION,<sp/>STR)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="165"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>do<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="166"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>localErr;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="167"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="168"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>localErr<sp/>=<sp/>(int)(ERR);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="169"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(unlikely(localErr<sp/>!=<sp/>0))<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="170"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>debug_print_assert(localErr,<sp/>NULL,<sp/>STR,<sp/>SHORT_FILE,<sp/>__LINE__,<sp/>__PRETTY_FUNCTION__);<sp/>\</highlight></codeline>
<codeline lineno="171"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>ACTION;<sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="172"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>goto<sp/>LABEL;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="173"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="174"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>while(1<sp/>==<sp/>0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal"></highlight></codeline>
<codeline lineno="177"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="178"><highlight class="comment"><sp/>*<sp/>Require<sp/>that<sp/>an<sp/>error<sp/>code<sp/>is<sp/>noErr<sp/>(0).</highlight></codeline>
<codeline lineno="179"><highlight class="comment"><sp/>*<sp/>If<sp/>the<sp/>error<sp/>code<sp/>is<sp/>non-0,<sp/>this<sp/>jumps<sp/>to<sp/>a<sp/>label.<sp/>No<sp/>debugging<sp/>information<sp/>is<sp/>printed.</highlight></codeline>
<codeline lineno="180"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="181"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/><sp/>ERR<sp/><sp/><sp/><sp/>error<sp/>to<sp/>be<sp/>evaluated.</highlight></codeline>
<codeline lineno="182"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/><sp/>LABEL<sp/><sp/>If<sp/>the<sp/>error<sp/>code<sp/>is<sp/>non-0,<sp/>jumps<sp/>to<sp/>the<sp/>LABEL.</highlight></codeline>
<codeline lineno="183"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="184"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>(!defined(require_noerr_quiet))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="185" refid="debug_8h_1a1607344c6ff3f694527458dcd73a6fbf" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>require_noerr_quiet(ERR,<sp/>LABEL)<sp/>\</highlight></codeline>
<codeline lineno="186"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>do<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="187"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(unlikely((ERR)<sp/>!=<sp/>0))<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="188"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>goto<sp/>LABEL;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="189"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="190"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>while(1<sp/>==<sp/>0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="192"><highlight class="normal"></highlight></codeline>
<codeline lineno="193"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="194"><highlight class="comment"><sp/>*<sp/>Require<sp/>that<sp/>an<sp/>error<sp/>code<sp/>is<sp/>noErr<sp/>(0)<sp/>with<sp/>an<sp/>action<sp/>to<sp/>execute<sp/>otherwise.</highlight></codeline>
<codeline lineno="195"><highlight class="comment"><sp/>*<sp/>If<sp/>the<sp/>error<sp/>code<sp/>is<sp/>non-0,<sp/>this<sp/>prints<sp/>debugging<sp/>information<sp/>(actual<sp/>expression<sp/>string,<sp/>file,<sp/>line<sp/>number,</highlight></codeline>
<codeline lineno="196"><highlight class="comment"><sp/>*<sp/>function<sp/>name,<sp/>etc.)<sp/>using<sp/>the<sp/>default<sp/>debugging<sp/>output<sp/>method<sp/>then<sp/>executes<sp/>an<sp/>action<sp/>and<sp/>jumps<sp/>to<sp/>a<sp/>label.</highlight></codeline>
<codeline lineno="197"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="198"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/><sp/>ERR<sp/><sp/><sp/><sp/><sp/>error<sp/>to<sp/>be<sp/>evaluated.</highlight></codeline>
<codeline lineno="199"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/><sp/>LABEL<sp/><sp/><sp/>If<sp/>the<sp/>error<sp/>code<sp/>is<sp/>non-0,<sp/>jumps<sp/>to<sp/>the<sp/>LABEL.</highlight></codeline>
<codeline lineno="200"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/><sp/>ACTION<sp/><sp/>If<sp/>the<sp/>error<sp/>code<sp/>is<sp/>non-0,<sp/>custom<sp/>code<sp/>to<sp/>executes.</highlight></codeline>
<codeline lineno="201"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="202"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>(!defined(require_noerr_action))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="203" refid="debug_8h_1aa60121841639f3b5700b19a1526a5232" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>require_noerr_action(ERR,<sp/>LABEL,<sp/>ACTION)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="204"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>do<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="205"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>localErr;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="206"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="207"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>localErr<sp/>=<sp/>(int)(ERR);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="208"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(unlikely(localErr<sp/>!=<sp/>0))<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="209"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>debug_print_assert(localErr,<sp/>NULL,<sp/>NULL,<sp/>SHORT_FILE,<sp/>__LINE__,<sp/>__PRETTY_FUNCTION__);<sp/>\</highlight></codeline>
<codeline lineno="210"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>ACTION;<sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="211"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>goto<sp/>LABEL;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="212"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="213"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>while(1<sp/>==<sp/>0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="214"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="215"><highlight class="normal"></highlight></codeline>
<codeline lineno="216"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="217"><highlight class="comment"><sp/>*<sp/>Require<sp/>that<sp/>an<sp/>error<sp/>code<sp/>is<sp/>noErr<sp/>(0)<sp/>with<sp/>an<sp/>action<sp/>to<sp/>execute<sp/>otherwise.</highlight></codeline>
<codeline lineno="218"><highlight class="comment"><sp/>*<sp/>If<sp/>the<sp/>error<sp/>code<sp/>is<sp/>non-0,<sp/>this<sp/>executes<sp/>an<sp/>action<sp/>and<sp/>jumps<sp/>to<sp/>a<sp/>label.<sp/>No<sp/>debugging<sp/>information<sp/>is<sp/>printed.</highlight></codeline>
<codeline lineno="219"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="220"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/><sp/>ERR<sp/><sp/><sp/><sp/><sp/>error<sp/>to<sp/>be<sp/>evaluated.</highlight></codeline>
<codeline lineno="221"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/><sp/>LABEL<sp/><sp/><sp/>If<sp/>the<sp/>error<sp/>code<sp/>is<sp/>non-0,<sp/>jumps<sp/>to<sp/>the<sp/>LABEL.</highlight></codeline>
<codeline lineno="222"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/><sp/>ACTION<sp/><sp/>If<sp/>the<sp/>error<sp/>code<sp/>is<sp/>non-0,<sp/>custom<sp/>code<sp/>to<sp/>executes.</highlight></codeline>
<codeline lineno="223"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="224"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>(!defined(require_noerr_action_quiet))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="225" refid="debug_8h_1a16f33c6ca26bcd92165c23a8cff1d28f" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>require_noerr_action_quiet(ERR,<sp/>LABEL,<sp/>ACTION)<sp/>\</highlight></codeline>
<codeline lineno="226"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>do<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="227"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(unlikely((ERR)<sp/>!=<sp/>0))<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="228"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>ACTION;<sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="229"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>goto<sp/>LABEL;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="230"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="231"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>while(1<sp/>==<sp/>0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="232"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="233"><highlight class="normal"></highlight></codeline>
<codeline lineno="234"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="235"><highlight class="comment"><sp/>*<sp/>Requires<sp/>that<sp/>an<sp/>expression<sp/>evaluate<sp/>to<sp/>true<sp/>with<sp/>an<sp/>action<sp/>to<sp/>execute<sp/>otherwise.</highlight></codeline>
<codeline lineno="236"><highlight class="comment"><sp/>*<sp/>If<sp/>expression<sp/>evalulates<sp/>to<sp/>false,<sp/>this<sp/>prints<sp/>debugging<sp/>information<sp/>(actual<sp/>expression<sp/>string,<sp/>file,<sp/>line<sp/>number,</highlight></codeline>
<codeline lineno="237"><highlight class="comment"><sp/>*<sp/>function<sp/>name,<sp/>etc.)<sp/>using<sp/>the<sp/>default<sp/>debugging<sp/>output<sp/>method<sp/>then<sp/>executes<sp/>an<sp/>action<sp/>and<sp/>jumps<sp/>to<sp/>a<sp/>label.</highlight></codeline>
<codeline lineno="238"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="239"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/><sp/>X<sp/><sp/><sp/><sp/><sp/><sp/><sp/>expression<sp/>to<sp/>be<sp/>evaluated.</highlight></codeline>
<codeline lineno="240"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/><sp/>LABEL<sp/><sp/><sp/>If<sp/>the<sp/>expression<sp/>evaluate<sp/>to<sp/>false,<sp/>jumps<sp/>to<sp/>the<sp/>LABEL.</highlight></codeline>
<codeline lineno="241"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/><sp/>ACTION<sp/><sp/>If<sp/>the<sp/>expression<sp/>evaluate<sp/>to<sp/>false,<sp/>custom<sp/>code<sp/>to<sp/>executes.</highlight></codeline>
<codeline lineno="242"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="243"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>(!defined(require_action))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="244" refid="debug_8h_1af4a91824c6ca0f3dea55d5cac7319b65" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>require_action(X,<sp/>LABEL,<sp/>ACTION)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="245"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>do<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="246"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(unlikely(!(X)))<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="247"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>debug_print_assert(0,<sp/>#X,<sp/>NULL,<sp/>SHORT_FILE,<sp/>__LINE__,<sp/>__PRETTY_FUNCTION__);<sp/>\</highlight></codeline>
<codeline lineno="248"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>ACTION;<sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="249"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>goto<sp/>LABEL;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="250"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="251"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>while<sp/>(1<sp/>==<sp/>0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="252"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="253"><highlight class="normal"></highlight></codeline>
<codeline lineno="254"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="255"><highlight class="comment"><sp/>*<sp/>Requires<sp/>that<sp/>an<sp/>expression<sp/>evaluate<sp/>to<sp/>true<sp/>with<sp/>an<sp/>explanation<sp/>and<sp/>action<sp/>to<sp/>execute<sp/>otherwise.</highlight></codeline>
<codeline lineno="256"><highlight class="comment"><sp/>*<sp/>If<sp/>expression<sp/>evalulates<sp/>to<sp/>false,<sp/>this<sp/>prints<sp/>debugging<sp/>information<sp/>(actual<sp/>expression<sp/>string,<sp/>file,<sp/>line<sp/>number,</highlight></codeline>
<codeline lineno="257"><highlight class="comment"><sp/>*<sp/>function<sp/>name,<sp/>etc.)<sp/>and<sp/>a<sp/>custom<sp/>explanation<sp/>string<sp/>using<sp/>the<sp/>default<sp/>debugging<sp/>output<sp/>method<sp/>then<sp/>executes<sp/>an</highlight></codeline>
<codeline lineno="258"><highlight class="comment"><sp/>*<sp/>action<sp/>and<sp/>jumps<sp/>to<sp/>a<sp/>label.</highlight></codeline>
<codeline lineno="259"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="260"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/><sp/>X<sp/><sp/><sp/><sp/><sp/><sp/><sp/>expression<sp/>to<sp/>be<sp/>evaluated.</highlight></codeline>
<codeline lineno="261"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/><sp/>LABEL<sp/><sp/><sp/>If<sp/>the<sp/>expression<sp/>evaluate<sp/>to<sp/>false,<sp/>jumps<sp/>to<sp/>the<sp/>LABEL.</highlight></codeline>
<codeline lineno="262"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/><sp/>ACTION<sp/><sp/>If<sp/>the<sp/>expression<sp/>evaluate<sp/>to<sp/>false,<sp/>custom<sp/>code<sp/>to<sp/>executes.</highlight></codeline>
<codeline lineno="263"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/><sp/>STR<sp/><sp/><sp/><sp/><sp/>If<sp/>the<sp/>expression<sp/>evaluate<sp/>to<sp/>false,<sp/>custom<sp/>string<sp/>to<sp/>print.</highlight></codeline>
<codeline lineno="264"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="265"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>(!defined(require_action_string))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="266" refid="debug_8h_1a46ec6dd3ae533fecdaaa01bd14d38c9d" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>require_action_string(X,<sp/>LABEL,<sp/>ACTION,<sp/>STR)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="267"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>do<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="268"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(unlikely(!(X)))<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="269"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>debug_print_assert(0,<sp/>#X,<sp/>STR,<sp/>SHORT_FILE,<sp/>__LINE__,<sp/>__PRETTY_FUNCTION__);<sp/>\</highlight></codeline>
<codeline lineno="270"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>ACTION;<sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="271"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>goto<sp/>LABEL;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="272"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="273"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>while<sp/>(1<sp/>==<sp/>0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="274"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="275"><highlight class="normal"></highlight></codeline>
<codeline lineno="276"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="277"><highlight class="comment"><sp/>*<sp/>Requires<sp/>that<sp/>an<sp/>expression<sp/>evaluate<sp/>to<sp/>true<sp/>with<sp/>an<sp/>action<sp/>to<sp/>execute<sp/>otherwise.</highlight></codeline>
<codeline lineno="278"><highlight class="comment"><sp/>*<sp/>If<sp/>expression<sp/>evalulates<sp/>to<sp/>false,<sp/>this<sp/>executes<sp/>an<sp/>action<sp/>and<sp/>jumps<sp/>to<sp/>a<sp/>label.</highlight></codeline>
<codeline lineno="279"><highlight class="comment"><sp/>*<sp/>No<sp/>debugging<sp/>information<sp/>is<sp/>printed.</highlight></codeline>
<codeline lineno="280"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="281"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/><sp/>X<sp/><sp/><sp/><sp/><sp/><sp/><sp/>expression<sp/>to<sp/>be<sp/>evaluated.</highlight></codeline>
<codeline lineno="282"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/><sp/>LABEL<sp/><sp/><sp/>If<sp/>the<sp/>expression<sp/>evaluate<sp/>to<sp/>false,<sp/>jumps<sp/>to<sp/>the<sp/>LABEL.</highlight></codeline>
<codeline lineno="283"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/><sp/>ACTION<sp/><sp/>If<sp/>the<sp/>expression<sp/>evaluate<sp/>to<sp/>false,<sp/>custom<sp/>code<sp/>to<sp/>executes.</highlight></codeline>
<codeline lineno="284"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="285"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>(!defined(require_action_quiet))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="286" refid="debug_8h_1a509a09fd01a9417030de240e23309a29" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>require_action_quiet(X,<sp/>LABEL,<sp/>ACTION)<sp/>\</highlight></codeline>
<codeline lineno="287"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>do<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="288"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(unlikely(!(X)))<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="289"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>ACTION;<sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="290"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>goto<sp/>LABEL;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="291"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="292"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="293"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>while(1<sp/>==<sp/>0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="294"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="295"><highlight class="normal"></highlight></codeline>
<codeline lineno="296"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="297"><highlight class="normal">}</highlight></codeline>
<codeline lineno="298"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="299"><highlight class="normal"></highlight></codeline>
<codeline lineno="300"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>AOS_DEBUG_H<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="301"><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/home/work/me/AliOS-Things/include/aos/debug.h"/>
  </compounddef>
</doxygen>
